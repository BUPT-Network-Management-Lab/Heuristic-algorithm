package CI;

import Graph.Graph;
import java.util.*;

public class Run {
	public static int randomInt(int start, int end) {//生成[start, end]之间的随机数
		Random random = new Random();
		int s = random.nextInt(end)%(end-start+1) + start;
		return s;
	}
	public int random_node(double capacity, Graph physic, ArrayList<Integer> result){
		int physic_node = randomInt(0, physic.nodes.length - 1);
		
		//当虚拟节点的需求大于物理节点的资源或者该物理节点已经被选中过,则不断循环，这是约束。
		while(capacity > physic.nodes[physic_node].getCapacity() 
				|| result.contains(physic_node)){
			physic_node = randomInt(0, physic.nodes.length - 1);
		}
		return physic_node;
	}
	
	public ArrayList<Integer> random_solution(Graph virtual, Graph physic){
		ArrayList<Integer> result = new ArrayList<Integer>();
		for(int i = 0; i < virtual.nodes.length; i++){
			//对应关系,索引为0，代表虚拟节点为0，其值代表映射到哪个物理节点上
			result.add(random_node(virtual.nodes[i].getCapacity(), physic, result));
		}
		return result;//返回映射结果
	}
	
	public void evaluate(ArrayList<Po> pop, Graph physic, Graph virtual){
		for(int i = 0; i < pop.size(); i++){
			ArrayList<Integer> result = pop.get(i).getSolution();//节点映射关系
			int cost = 0;
			int panduan = 0;
			for(int j = 0; j < virtual.links.length; j++){
				int left = virtual.links[j].getLeftID();
				int right = virtual.links[j].getRightID();
				int physic_left = result.get(left);
				int physic_right = result.get(right);
				int[] path = physic.dijkstra(physic_left, physic_right, 
						virtual.links[j].getBandWidth());
				if(path == null){
					pop.get(i).setCost(Integer.MAX_VALUE);//这种方案就不要了
					panduan = 1;
					break;
				}
				//成本函数，跳数乘以带宽
				cost += (path.length - 1)*virtual.links[j].getBandWidth();
			}
			if(panduan == 0){
				pop.get(i).setCost(cost);
			}
			physic.refreshMatrix();//重置
			
		}
	}
	
	public double num_clones(int size, double clone_factor){
		return Math.floor(size * clone_factor);//例子Math.floor(1.4)=1.0
	}
	
	public void calculate_affinity(ArrayList<Po> pop){
		Collections.sort(pop, new SortByCost());
		int range = pop.get(pop.size() - 1).getCost() - pop.get(0).getCost();
		System.out.println("range: " + range);
		if(range == 0){
			for(int i = 0; i < pop.size(); i++) {
				pop.get(i).setAffinity(1.0);
			}
		}else{
			for(int i = 0; i < pop.size(); i++) {
				System.out.println(pop.get(i).getCost());
				pop.get(i).setAffinity(1.0 - (pop.get(i).getCost() / range));
			}
		}
	}
	public ArrayList<Po> clone_and_hypermutate(ArrayList<Po> pop, double clone_factor,
			double mutate_factor){
		ArrayList<Po> clones = new ArrayList<Po>();
		double number_clones = num_clones(pop.size(), clone_factor);
		calculate_affinity(pop);
		System.out.println("affinity............");
		for(int i = 0; i < pop.size(); i++){
			System.out.println(pop.get(i).getAffinity());
		}
		return clones;
	}
	
	public Po search(Graph physic, Graph virtual, int max_gens, int pop_size, 
			double clone_factor, int num_rand, double mutate_factor){
		ArrayList<Po> pop = new ArrayList<Po>();
		for(int i = 0; i < pop_size; i++){
			Po po = new Po();
			po.setSolution(random_solution(virtual, physic));//生成随机解
			pop.add(po);
		}
		evaluate(pop, physic, virtual);//计算开销。
		physic.refreshMatrix();
		Collections.sort(pop, new SortByCost());
		delete_null(pop);//去除掉不合格的方案。
		System.out.println("best" + pop.get(0).getCost());
		for(int i = 0; i < max_gens; i++){
			ArrayList<Po> clones = clone_and_hypermutate(pop, clone_factor, mutate_factor);
		}
		return pop.get(0);
	}
	
	public void delete_null(ArrayList<Po> pop){
		while(pop.size() > 0){
			if(pop.get(pop.size() - 1).getCost() == Integer.MAX_VALUE){
				pop.remove(pop.size() - 1);
			}else{
				break;
			}
		}
	}
	
	
	
	public static void main(String[] args) {
		Run test = new Run();
		Graph physic=new Graph("P.txt",true);//55-103
		Graph virtual=new Graph("V.txt",false);//14-21
		/*for(int i = 0; i < physic.links.length; i++){
			System.out.println(physic.links[i].getBandWidth());
		}
		System.out.println("............");
		for(int i = 0; i < virtual.links.length; i++){
			System.out.println(virtual.links[i].getBandWidth());
		}*/
		//物理节点0容量，取值0-54
		physic.nodes[0].getCapacity();
		//虚拟节点0容量，取值0-13
		virtual.nodes[0].getCapacity();
		
		//链路映射，最短路径，无路是为NULL，会更新邻接矩阵
		int[] path=physic.dijkstra(1, 30, 2000);
		//邻接矩阵复原
		physic.refreshMatrix();
		
		//虚拟链路节点
		virtual.links[0].getLeftID();
		virtual.links[0].getRightID();
		
		//虚拟链路带宽
		virtual.links[0].getBandWidth();
		
		int max_gens = 20;//迭代20次
		int pop_size = 50;//初始抗体数量
		double clone_factor = 0.1;//克隆因子
		int num_rand = 2;//随机生成抗体的数量
		double mutate_factor = -2.5;//变异因子
		Po result = test.search(physic, virtual, max_gens, pop_size, clone_factor, num_rand, mutate_factor);
		
	}
}
class SortByCost implements Comparator{
	public int compare(Object o1, Object o2) {
		Po s1 = (Po) o1;
		Po s2 = (Po) o2;
		if(s1.getCost() > s2.getCost()) {
			return 1;
		}else if(s1.getCost() < s2.getCost()) {
			return -1;
		}
		return 0;//相等时要返回0，因为值非常精确，当差值非常小时就认为是0，需要返回0，否则会报错
	}
}
